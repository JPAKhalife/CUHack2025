{"version":3,"sources":["/var/gadget/codegen/framework-1742065326854-RUN6wP/src/index.ts"],"sourcesContent":["/**\n* This is the Gadget server side types library for:\n*\n*       _                                 _           _             \n*   ___| |__   __ _ _ __   ___  ___ _ __ | | ___  ___(_) ___  _ __  \n*  / __| '_ \\ / _` | '_ \\ / _ \\/ __| '_ \\| |/ _ \\/ __| |/ _ \\| '_ \\ \n*  \\__ \\ | | | (_| | |_) |  __/\\__ \\ |_) | | (_) \\__ \\ | (_) | | | |\n*  |___/_| |_|\\__,_| .__/ \\___||___/ .__/|_|\\___/|___/_|\\___/|_| |_|\n*                  |_|             |_|                              \n*\n* Built for environment `Development` at version 3\n* Framework version: ^1.3.0\n* Edit this app here: https://shapesplosion.gadget.dev/edit\n*/\n/// <reference path=\"./ActionContextTypes.d.ts\" />\nimport type { Client } from \"@gadget-client/shapesplosion\";\nimport { Logger } from \"./AmbientContext.js\";\nexport { InvalidRecordError } from '@gadgetinc/api-client-core'\n\nexport * from \"./metadataFileTypes.js\";\nexport * from \"./AmbientContext.js\";\nexport * from \"./AppConfigs.js\";\nexport * from \"./AppConfiguration.js\";\nexport * from \"./AppConnections.js\";\nimport { AppConnections } from \"./AppConnections.js\";\nexport * from \"./auth.js\";\nexport * as DefaultEmailTemplates from \"./email-templates/index.js\";\nexport * from \"./emails.js\";\nexport { InvalidStateTransitionError } from \"./errors.js\";\nexport * from \"./global-actions.js\";\nexport * from \"./routes.js\";\nexport * from \"./state-chart/index.js\";\nexport * from \"./types.js\";\nexport * from \"./ActionOptions.js\";\nexport * from \"./effects.js\";\nexport * from \"./utils.js\";\nimport type { RouteContext } from \"./routes.js\";\n\nexport {\n  preventCrossShopDataAccess,\n  ShopifyBulkOperationState,\n  ShopifySellingPlanGroupProductState,\n  ShopifySellingPlanGroupProductVariantState,\n  ShopifyShopState,\n  ShopifySyncState,\n  abortSync,\n  finishBulkOperation,\n  globalShopifySync,\n  shopifySync,\n} from \"./shopify/index.js\";\n\n/**\n * @internal\n */\nimport { Globals, actionContextLocalStorage } from \"./globals.js\";\nexport * from \"./models/Session.js\";\nexport * from \"./models/User.js\";\n\n/**\n* A map of connection name to instantiated connection objects for the app.\n*/\nlet connections: AppConnections;\n\n/**\n * An instance of the Gadget logger\n */\nlet logger: Logger;\n/**\n * An instance of the Gadget API client that has admin permissions\n */\nlet api: Client;\n\n/**\n* This is used internally to set the connections.\n* @internal\n*/\nexport const setConnections = (appConnections: AppConnections) => {\n  connections = new Proxy(appConnections, {\n    get: (target: any, prop: string) => {\n      const actionContext = actionContextLocalStorage.getStore();\n      if(actionContext && actionContext.connections) {\n        return actionContext.connections[prop];\n      }\n\n      const routeContext = Globals.requestContext.get(\"requestContext\");\n      if(routeContext && routeContext.connections) {\n        return routeContext.connections[prop];\n      }\n\n      return target[prop];\n    }\n  })\n}\n\n/**\n * This is used internally to set the rootLogger.\n * @internal\n */\nexport const setLogger = (rootLogger: Logger) => {\n  // set the internal facing global logger to be this instance, which is tagged with the platform source\n  Globals.logger = rootLogger;\n\n  // set the user-facing global logger to be this instance tagged with the user source, as users are importing this global and using it\n  logger = rootLogger.child({ source: \"user\" });\n};\n\n/**\n * This is used internally to set the client Instance\n * @internal\n */\nexport const setApiClient = (client: Client) => {\n  api = client;\n}\n\nexport {\n  api, logger, connections\n};\n\n/**\n * @internal\n */\nexport {\n  Globals,\n  actionContextLocalStorage\n};\n\n\n"],"names":["InvalidRecordError","DefaultEmailTemplates","InvalidStateTransitionError","preventCrossShopDataAccess","ShopifyBulkOperationState","ShopifySellingPlanGroupProductState","ShopifySellingPlanGroupProductVariantState","ShopifyShopState","ShopifySyncState","abortSync","finishBulkOperation","globalShopifySync","shopifySync","Globals","actionContextLocalStorage","connections","logger","api","setConnections","appConnections","Proxy","get","target","prop","actionContext","getStore","routeContext","requestContext","setLogger","rootLogger","child","source","setApiClient","client"],"mappings":"AAAA;;;;;;;;;;;;;AAaA,GACA,kDAAkD;AAGlD,SAASA,kBAAkB,QAAQ,6BAA4B;AAE/D,cAAc,yBAAyB;AACvC,cAAc,sBAAsB;AACpC,cAAc,kBAAkB;AAChC,cAAc,wBAAwB;AACtC,cAAc,sBAAsB;AAEpC,cAAc,YAAY;AAC1B,OAAO,KAAKC,qBAAqB,MAAM,6BAA6B;AACpE,cAAc,cAAc;AAC5B,SAASC,2BAA2B,QAAQ,cAAc;AAC1D,cAAc,sBAAsB;AACpC,cAAc,cAAc;AAC5B,cAAc,yBAAyB;AACvC,cAAc,aAAa;AAC3B,cAAc,qBAAqB;AACnC,cAAc,eAAe;AAC7B,cAAc,aAAa;AAG3B,SACEC,0BAA0B,EAC1BC,yBAAyB,EACzBC,mCAAmC,EACnCC,0CAA0C,EAC1CC,gBAAgB,EAChBC,gBAAgB,EAChBC,SAAS,EACTC,mBAAmB,EACnBC,iBAAiB,EACjBC,WAAW,QACN,qBAAqB;AAE5B;;CAEC,GACD,SAASC,OAAO,EAAEC,yBAAyB,QAAQ,eAAe;AAClE,cAAc,sBAAsB;AACpC,cAAc,mBAAmB;AAEjC;;AAEA,GACA,IAAIC;AAEJ;;CAEC,GACD,IAAIC;AACJ;;CAEC,GACD,IAAIC;AAEJ;;;AAGA,GACA,OAAO,MAAMC,iBAAiB,CAACC;IAC7BJ,cAAc,IAAIK,MAAMD,gBAAgB;QACtCE,KAAK,CAACC,QAAaC;YACjB,MAAMC,gBAAgBV,0BAA0BW,QAAQ;YACxD,IAAGD,iBAAiBA,cAAcT,WAAW,EAAE;gBAC7C,OAAOS,cAAcT,WAAW,CAACQ,KAAK;YACxC;YAEA,MAAMG,eAAeb,QAAQc,cAAc,CAACN,GAAG,CAAC;YAChD,IAAGK,gBAAgBA,aAAaX,WAAW,EAAE;gBAC3C,OAAOW,aAAaX,WAAW,CAACQ,KAAK;YACvC;YAEA,OAAOD,MAAM,CAACC,KAAK;QACrB;IACF;AACF,EAAC;AAED;;;CAGC,GACD,OAAO,MAAMK,YAAY,CAACC;IACxB,sGAAsG;IACtGhB,QAAQG,MAAM,GAAGa;IAEjB,qIAAqI;IACrIb,SAASa,WAAWC,KAAK,CAAC;QAAEC,QAAQ;IAAO;AAC7C,EAAE;AAEF;;;CAGC,GACD,OAAO,MAAMC,eAAe,CAACC;IAC3BhB,MAAMgB;AACR,EAAC;AAED,SACEhB,GAAG,EAAED,MAAM,EAAED,WAAW,GACxB;AAEF;;CAEC,GACD,SACEF,OAAO,EACPC,yBAAyB,GACzB"}