{"version":3,"sources":["/var/gadget/codegen/framework-1742091933726-6MDDXl/src/shopify/effects.ts"],"sourcesContent":["import type { GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { validateBelongsToLink } from \"../auth.js\";\nimport {\n  getActionContextFromLocalStorage,\n  getCurrentContext,\n  internalModelManagerForModel,\n  maybeGetActionContextFromLocalStorage,\n} from \"../effects.js\";\nimport { InvalidActionInputError } from \"../errors.js\";\nimport { Globals } from \"../globals.js\";\nimport { AppTenancyKey } from \"../tenancy.js\";\nimport type { AnyParams } from \"../types.js\";\nimport { assert } from \"../utils.js\";\nimport { invalidPlanNames } from \"./constants.js\";\n\nexport const ShopifyShopState = {\n  Installed: { created: \"installed\" },\n  Uninstalled: { created: \"uninstalled\" },\n};\n\nexport const ShopifySyncState = {\n  Created: \"created\",\n  Running: \"running\",\n  Completed: \"completed\",\n  Errored: \"errored\",\n};\n\nexport const ShopifyBulkOperationState = {\n  Created: \"created\",\n  Completed: \"completed\",\n  Canceled: \"canceled\",\n  Failed: \"failed\",\n  Expired: \"expired\",\n};\n\nexport const ShopifySellingPlanGroupProductVariantState = {\n  Started: \"started\",\n  Created: \"created\",\n  Deleted: \"deleted\",\n};\n\nexport const ShopifySellingPlanGroupProductState = {\n  Started: \"started\",\n  Created: \"created\",\n  Deleted: \"deleted\",\n};\n\n/**\n * The following is used to power shopifySync model.\n * Learn more about syncing visit our docs: https://docs.gadget.dev/guides/plugins/shopify/syncing-shopify-data#syncing\n */\nexport async function shopifySync(params: AnyParams, record: GadgetRecord<any>): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n  const effectAPIs = context.effectAPIs;\n\n  const syncRecord: { syncSince?: Date; id: bigint; shopId: string; models: any; force: boolean } = assert(\n    record,\n    \"cannot start a shop sync from this action\"\n  );\n\n  const shopId = assert(syncRecord.shopId, \"a shop is required to start a sync\");\n\n  if (!syncRecord.models || (Array.isArray(syncRecord.models) && syncRecord.models.every((m) => typeof m == \"string\"))) {\n    try {\n      await effectAPIs.sync(\n        syncRecord.id.toString(),\n        shopId,\n        syncRecord.syncSince,\n        syncRecord.models,\n        syncRecord.force,\n        params.startReason\n      );\n    } catch (error) {\n      Globals.logger.error({ error, connectionSyncId: syncRecord.id }, \"an error occurred starting shop sync\");\n      throw error;\n    }\n  } else {\n    throw new InvalidActionInputError(\"Models must be an array of api identifiers\");\n  }\n}\n\nexport async function abortSync(params: AnyParams, record: GadgetRecord<any>): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n  const effectAPIs = context.effectAPIs;\n\n  const syncRecord: { id: bigint } = assert(record, \"a record is required to abort a shop sync\");\n\n  const syncId = assert(syncRecord.id, \"a sync id is required to start a sync\");\n\n  if (!params.errorMessage) {\n    record.errorMessage = \"Sync aborted\";\n  }\n\n  Globals.logger.info({ userVisible: true, connectionSyncId: syncId }, \"aborting sync\");\n\n  try {\n    await effectAPIs.abortSync(syncId.toString());\n  } catch (error) {\n    Globals.logger.error({ error, connectionSyncId: syncId }, \"an error occurred aborting sync\");\n    throw error;\n  }\n}\n\n/**\n * Applicable for multi-tenant Shopify apps(public apps), or Shopify Customer Extension apps\n * Enforces that the given record is only accessible by the current shop or customer\n *\n * For new records: sets the the current session's `shopId` to the record. If the tenant is a customer then will set the current sessions' customerId to the record.\n * For existing records: Verifies the record objects `shopId` and/or `customerId` matches the one from the current session.\n *\n * *\n * @param params - incoming data validated against the current `shopId`\n * @param record - record used to validate or set the `shopId` on\n * @param {Object} options - Additional options for cross-shop or cross-customer validation\n * @param {string} options.shopBelongsToField - Specifies which related model is used for cross-shop validation.\n * @param {string} options.customerBelongsToField - Specifies which related model is used for cross-customer validation.\n * @param {boolean} options.enforceCustomerTenancy - Whether or not to enforce customer tenacy. Defaults to true.\n */\nexport async function preventCrossShopDataAccess(\n  params: AnyParams,\n  record: GadgetRecord<any>,\n  options?: { shopBelongsToField?: string; customerBelongsToField?: string; enforceCustomerTenancy?: boolean }\n): Promise<void> {\n  const enforceCustomerTenancy = options?.enforceCustomerTenancy ?? true;\n  const context = getActionContextFromLocalStorage();\n\n  if (context.type != \"effect\") {\n    throw new Error(\"Can't prevent cross shop data access outside of an action effect\");\n  }\n  if (!params) {\n    throw new Error(\n      \"The `params` parameter is required in preventCrossShopDataAccess(params, record, options?: { shopBelongsToField: string })\"\n    );\n  }\n  if (!record) {\n    throw new Error(\n      \"The `record` parameter is required in preventCrossShopDataAccess(params, record, options?: { shopBelongsToField: string })\"\n    );\n  }\n  const model = context.model;\n  const appTenancy = context[AppTenancyKey];\n  const shopBelongsToField = options?.shopBelongsToField;\n  const customerBelongsToField = options?.customerBelongsToField;\n\n  // if there's no tenancy let's continue\n  if (appTenancy?.shopify?.shopId === undefined) {\n    return;\n  }\n  // if this effect is not run in the context of a model then it does not apply\n  if (!model) {\n    return;\n  }\n\n  const shopId = String(appTenancy.shopify.shopId);\n  const customerId = appTenancy.shopify.customerId ? String(appTenancy.shopify.customerId) : undefined;\n\n  const input = params[model.apiIdentifier];\n  validateBelongsToLink({\n    input,\n    record,\n    params,\n    tenantId: shopId,\n    model,\n    tenantModelKey: ShopifyShopKey,\n    tenantBelongsToField: shopBelongsToField,\n    tenantType: TenantType.Shop,\n    tenantName: \"Shopify\",\n  });\n\n  if (customerId && enforceCustomerTenancy) {\n    validateBelongsToLink({\n      input,\n      record,\n      params,\n      tenantId: customerId,\n      model,\n      tenantModelKey: ShopifyCustomerKey,\n      tenantBelongsToField: customerBelongsToField,\n      tenantType: TenantType.Customer,\n      tenantName: \"Shopify\",\n    });\n  }\n}\n\n/**\n * Syncs Shopify models across all models\n *\n * @param params - list of Shopify app credentials to sync data from\n * @param syncSince - starting point for data sync (default: all time)\n * @param models - list of model names to sync data from\n * @param force - enforces syncswithout checking if they're up to date\n * @param startReason - a string reason stored on the created 'shopifySync' records\n */\nexport async function globalShopifySync(params: {\n  apiKeys: string[];\n  syncSince: string | Date;\n  models: string[];\n  force?: boolean;\n  startReason?: string;\n}): Promise<void> {\n  const context = maybeGetActionContextFromLocalStorage();\n  const effectAPIs = assert(\n    context ? context.effectAPIs : getCurrentContext().effectAPIs,\n    \"effect apis is missing from the current context\"\n  );\n  const api = assert(context ? context.api : getCurrentContext().api, \"api client is missing from the current context\");\n\n  const { apiKeys, syncSince, models, force, startReason } = params;\n\n  const {\n    shopModelIdentifier,\n    installedViaKeyFieldIdentifier,\n    shopifySyncModelApiIdentifier,\n    runShopifySyncAction,\n    accessTokenIdentifier,\n    forceFieldIdentifier,\n  } = await effectAPIs.getSyncIdentifiers();\n  const manager = internalModelManagerForModel(api, shopModelIdentifier, []);\n\n  const pageSize = 250;\n  let pageInfo: { first?: number; endCursor?: string; hasNextPage: boolean } = { first: pageSize, hasNextPage: true };\n  const results: { id: string; domain: string; state: Record<string, any>; [key: string]: any }[] = [];\n\n  if (apiKeys && apiKeys.length > 0) {\n    try {\n      while (pageInfo.hasNextPage) {\n        const records = await manager.findMany({\n          filter: {\n            [installedViaKeyFieldIdentifier]: {\n              in: apiKeys,\n            },\n            state: {\n              inState: \"created.installed\",\n            },\n            planName: {\n              notIn: invalidPlanNames,\n            },\n          },\n          first: pageInfo.first,\n          after: pageInfo.endCursor,\n        });\n        results.push(...(records as any[]));\n        pageInfo = records.pagination.pageInfo;\n      }\n    } catch (error) {\n      Globals.logger.info({ userVisible: true, error, apiKeys }, \"could not get shops for all API keys\");\n      throw error;\n    }\n\n    for (const result of results) {\n      // skip the sync if there is no accessToken set or if the state is uninstalled\n      if (Globals.platformModules.lodash().isEmpty(result[accessTokenIdentifier]) || result.state?.created == \"uninstalled\") {\n        Globals.logger.info({ shopId: result.id }, \"skipping sync for shop without access token or is uninstalled\");\n        continue;\n      }\n\n      try {\n        const shopifySyncModelManager = Globals.platformModules.lodash().get(api, runShopifySyncAction.dotNotationPath);\n        await shopifySyncModelManager[runShopifySyncAction.apiIdentifier]({\n          [shopifySyncModelApiIdentifier]: {\n            shop: {\n              _link: result.id,\n            },\n            domain: result.domain,\n            syncSince,\n            models,\n            ...(forceFieldIdentifier ? { force } : undefined),\n          },\n          startReason,\n        });\n      } catch (error) {\n        // log that the sync could not be started for the shop but continue\n        Globals.logger.warn({ userVisible: true, error, shop: result }, \"couldn't start sync for shop\");\n      }\n    }\n  } else {\n    throw new InvalidActionInputError(\"missing at least 1 api key\");\n  }\n}\n\nconst enum TenantType {\n  Shop = \"shop\",\n  Customer = \"customer\",\n}\n\nconst shopifyModelKey = (modelName: string): string => {\n  const modelKey = modelName.replaceAll(\" \", \"\");\n  return `DataModel-Shopify-${modelKey}`;\n};\n\n/**\n * Updates the state of a `bulkOperation` record from Shopify when the operation completes.\n *\n * @param record - the `bulkOperation` record updated\n */\nexport async function finishBulkOperation(record: GadgetRecord<any>): Promise<void> {\n  if (!record?.id) {\n    Globals.logger.warn(`Expected bulk operation record to be present for action`);\n    return;\n  }\n\n  const context = getActionContextFromLocalStorage();\n  const shopifyAPI = await (context.connections as Record<string, any>).shopify.forShopId(record.shopId);\n  if (!shopifyAPI) {\n    Globals.logger.error(`Could not instantiate Shopify client for shop ID ${record.shopId}`);\n    return;\n  }\n  const bulkOperation = (\n    await shopifyAPI.graphql(\n      `query {\n        node(id: \"${ShopifyBulkOperationGIDForId(record.id)}\") {\n          ... on BulkOperation {\n            id\n            status\n            errorCode\n            createdAt\n            completedAt\n            objectCount\n            fileSize\n            url\n            type\n            partialDataUrl\n            rootObjectCount\n          }\n        }\n      }`,\n      {}\n    )\n  ).node;\n  // normalize the mixed upper/lowercase (GraphQL/REST) to lowercase\n  const { status, errorCode, type } = bulkOperation;\n  Object.assign(record, {\n    ...bulkOperation,\n    status: status?.toLowerCase(),\n    errorCode: errorCode?.toLowerCase(),\n    type: type?.toLowerCase(),\n    id: record.id,\n  });\n}\n\nconst ShopifyShopKey: string = shopifyModelKey(\"Shop\");\nconst ShopifyCustomerKey: string = shopifyModelKey(\"Customer\");\n\nconst ShopifyBulkOperationGIDForId = (id: string) => `gid://shopify/BulkOperation/${id}`;\n"],"names":["validateBelongsToLink","getActionContextFromLocalStorage","getCurrentContext","internalModelManagerForModel","maybeGetActionContextFromLocalStorage","InvalidActionInputError","Globals","AppTenancyKey","assert","invalidPlanNames","ShopifyShopState","Installed","created","Uninstalled","ShopifySyncState","Created","Running","Completed","Errored","ShopifyBulkOperationState","Canceled","Failed","Expired","ShopifySellingPlanGroupProductVariantState","Started","Deleted","ShopifySellingPlanGroupProductState","shopifySync","params","record","context","effectAPIs","syncRecord","shopId","models","Array","isArray","every","m","sync","id","toString","syncSince","force","startReason","error","logger","connectionSyncId","abortSync","syncId","errorMessage","info","userVisible","preventCrossShopDataAccess","options","enforceCustomerTenancy","type","Error","model","appTenancy","shopBelongsToField","customerBelongsToField","shopify","undefined","String","customerId","input","apiIdentifier","tenantId","tenantModelKey","ShopifyShopKey","tenantBelongsToField","tenantType","tenantName","ShopifyCustomerKey","globalShopifySync","api","apiKeys","shopModelIdentifier","installedViaKeyFieldIdentifier","shopifySyncModelApiIdentifier","runShopifySyncAction","accessTokenIdentifier","forceFieldIdentifier","getSyncIdentifiers","manager","pageSize","pageInfo","first","hasNextPage","results","length","records","findMany","filter","in","state","inState","planName","notIn","after","endCursor","push","pagination","result","platformModules","lodash","isEmpty","shopifySyncModelManager","get","dotNotationPath","shop","_link","domain","warn","shopifyModelKey","modelName","modelKey","replaceAll","finishBulkOperation","shopifyAPI","connections","forShopId","bulkOperation","graphql","ShopifyBulkOperationGIDForId","node","status","errorCode","Object","assign","toLowerCase"],"mappings":"AACA,SAASA,qBAAqB,QAAQ,aAAa;AACnD,SACEC,gCAAgC,EAChCC,iBAAiB,EACjBC,4BAA4B,EAC5BC,qCAAqC,QAChC,gBAAgB;AACvB,SAASC,uBAAuB,QAAQ,eAAe;AACvD,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,aAAa,QAAQ,gBAAgB;AAE9C,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,gBAAgB,QAAQ,iBAAiB;AAElD,OAAO,MAAMC,mBAAmB;IAC9BC,WAAW;QAAEC,SAAS;IAAY;IAClCC,aAAa;QAAED,SAAS;IAAc;AACxC,EAAE;AAEF,OAAO,MAAME,mBAAmB;IAC9BC,SAAS;IACTC,SAAS;IACTC,WAAW;IACXC,SAAS;AACX,EAAE;AAEF,OAAO,MAAMC,4BAA4B;IACvCJ,SAAS;IACTE,WAAW;IACXG,UAAU;IACVC,QAAQ;IACRC,SAAS;AACX,EAAE;AAEF,OAAO,MAAMC,6CAA6C;IACxDC,SAAS;IACTT,SAAS;IACTU,SAAS;AACX,EAAE;AAEF,OAAO,MAAMC,sCAAsC;IACjDF,SAAS;IACTT,SAAS;IACTU,SAAS;AACX,EAAE;AAEF;;;CAGC,GACD,OAAO,eAAeE,YAAYC,MAAiB,EAAEC,MAAyB;IAC5E,MAAMC,UAAU7B;IAChB,MAAM8B,aAAaD,QAAQC,UAAU;IAErC,MAAMC,aAA4FxB,OAChGqB,QACA;IAGF,MAAMI,SAASzB,OAAOwB,WAAWC,MAAM,EAAE;IAEzC,IAAI,CAACD,WAAWE,MAAM,IAAKC,MAAMC,OAAO,CAACJ,WAAWE,MAAM,KAAKF,WAAWE,MAAM,CAACG,KAAK,CAAC,CAACC,IAAM,OAAOA,KAAK,WAAY;QACpH,IAAI;YACF,MAAMP,WAAWQ,IAAI,CACnBP,WAAWQ,EAAE,CAACC,QAAQ,IACtBR,QACAD,WAAWU,SAAS,EACpBV,WAAWE,MAAM,EACjBF,WAAWW,KAAK,EAChBf,OAAOgB,WAAW;QAEtB,EAAE,OAAOC,OAAO;YACdvC,QAAQwC,MAAM,CAACD,KAAK,CAAC;gBAAEA;gBAAOE,kBAAkBf,WAAWQ,EAAE;YAAC,GAAG;YACjE,MAAMK;QACR;IACF,OAAO;QACL,MAAM,IAAIxC,wBAAwB;IACpC;AACF;AAEA,OAAO,eAAe2C,UAAUpB,MAAiB,EAAEC,MAAyB;IAC1E,MAAMC,UAAU7B;IAChB,MAAM8B,aAAaD,QAAQC,UAAU;IAErC,MAAMC,aAA6BxB,OAAOqB,QAAQ;IAElD,MAAMoB,SAASzC,OAAOwB,WAAWQ,EAAE,EAAE;IAErC,IAAI,CAACZ,OAAOsB,YAAY,EAAE;QACxBrB,OAAOqB,YAAY,GAAG;IACxB;IAEA5C,QAAQwC,MAAM,CAACK,IAAI,CAAC;QAAEC,aAAa;QAAML,kBAAkBE;IAAO,GAAG;IAErE,IAAI;QACF,MAAMlB,WAAWiB,SAAS,CAACC,OAAOR,QAAQ;IAC5C,EAAE,OAAOI,OAAO;QACdvC,QAAQwC,MAAM,CAACD,KAAK,CAAC;YAAEA;YAAOE,kBAAkBE;QAAO,GAAG;QAC1D,MAAMJ;IACR;AACF;AAEA;;;;;;;;;;;;;;CAcC,GACD,OAAO,eAAeQ,2BACpBzB,MAAiB,EACjBC,MAAyB,EACzByB,OAA4G;IAE5G,MAAMC,yBAAyBD,SAASC,0BAA0B;IAClE,MAAMzB,UAAU7B;IAEhB,IAAI6B,QAAQ0B,IAAI,IAAI,UAAU;QAC5B,MAAM,IAAIC,MAAM;IAClB;IACA,IAAI,CAAC7B,QAAQ;QACX,MAAM,IAAI6B,MACR;IAEJ;IACA,IAAI,CAAC5B,QAAQ;QACX,MAAM,IAAI4B,MACR;IAEJ;IACA,MAAMC,QAAQ5B,QAAQ4B,KAAK;IAC3B,MAAMC,aAAa7B,OAAO,CAACvB,cAAc;IACzC,MAAMqD,qBAAqBN,SAASM;IACpC,MAAMC,yBAAyBP,SAASO;IAExC,uCAAuC;IACvC,IAAIF,YAAYG,SAAS7B,WAAW8B,WAAW;QAC7C;IACF;IACA,6EAA6E;IAC7E,IAAI,CAACL,OAAO;QACV;IACF;IAEA,MAAMzB,SAAS+B,OAAOL,WAAWG,OAAO,CAAC7B,MAAM;IAC/C,MAAMgC,aAAaN,WAAWG,OAAO,CAACG,UAAU,GAAGD,OAAOL,WAAWG,OAAO,CAACG,UAAU,IAAIF;IAE3F,MAAMG,QAAQtC,MAAM,CAAC8B,MAAMS,aAAa,CAAC;IACzCnE,sBAAsB;QACpBkE;QACArC;QACAD;QACAwC,UAAUnC;QACVyB;QACAW,gBAAgBC;QAChBC,sBAAsBX;QACtBY,UAAU;QACVC,YAAY;IACd;IAEA,IAAIR,cAAcV,wBAAwB;QACxCvD,sBAAsB;YACpBkE;YACArC;YACAD;YACAwC,UAAUH;YACVP;YACAW,gBAAgBK;YAChBH,sBAAsBV;YACtBW,UAAU;YACVC,YAAY;QACd;IACF;AACF;AAEA;;;;;;;;CAQC,GACD,OAAO,eAAeE,kBAAkB/C,MAMvC;IACC,MAAME,UAAU1B;IAChB,MAAM2B,aAAavB,OACjBsB,UAAUA,QAAQC,UAAU,GAAG7B,oBAAoB6B,UAAU,EAC7D;IAEF,MAAM6C,MAAMpE,OAAOsB,UAAUA,QAAQ8C,GAAG,GAAG1E,oBAAoB0E,GAAG,EAAE;IAEpE,MAAM,EAAEC,OAAO,EAAEnC,SAAS,EAAER,MAAM,EAAES,KAAK,EAAEC,WAAW,EAAE,GAAGhB;IAE3D,MAAM,EACJkD,mBAAmB,EACnBC,8BAA8B,EAC9BC,6BAA6B,EAC7BC,oBAAoB,EACpBC,qBAAqB,EACrBC,oBAAoB,EACrB,GAAG,MAAMpD,WAAWqD,kBAAkB;IACvC,MAAMC,UAAUlF,6BAA6ByE,KAAKE,qBAAqB,EAAE;IAEzE,MAAMQ,WAAW;IACjB,IAAIC,WAAyE;QAAEC,OAAOF;QAAUG,aAAa;IAAK;IAClH,MAAMC,UAA4F,EAAE;IAEpG,IAAIb,WAAWA,QAAQc,MAAM,GAAG,GAAG;QACjC,IAAI;YACF,MAAOJ,SAASE,WAAW,CAAE;gBAC3B,MAAMG,UAAU,MAAMP,QAAQQ,QAAQ,CAAC;oBACrCC,QAAQ;wBACN,CAACf,+BAA+B,EAAE;4BAChCgB,IAAIlB;wBACN;wBACAmB,OAAO;4BACLC,SAAS;wBACX;wBACAC,UAAU;4BACRC,OAAO1F;wBACT;oBACF;oBACA+E,OAAOD,SAASC,KAAK;oBACrBY,OAAOb,SAASc,SAAS;gBAC3B;gBACAX,QAAQY,IAAI,IAAKV;gBACjBL,WAAWK,QAAQW,UAAU,CAAChB,QAAQ;YACxC;QACF,EAAE,OAAO1C,OAAO;YACdvC,QAAQwC,MAAM,CAACK,IAAI,CAAC;gBAAEC,aAAa;gBAAMP;gBAAOgC;YAAQ,GAAG;YAC3D,MAAMhC;QACR;QAEA,KAAK,MAAM2D,UAAUd,QAAS;YAC5B,8EAA8E;YAC9E,IAAIpF,QAAQmG,eAAe,CAACC,MAAM,GAAGC,OAAO,CAACH,MAAM,CAACtB,sBAAsB,KAAKsB,OAAOR,KAAK,EAAEpF,WAAW,eAAe;gBACrHN,QAAQwC,MAAM,CAACK,IAAI,CAAC;oBAAElB,QAAQuE,OAAOhE,EAAE;gBAAC,GAAG;gBAC3C;YACF;YAEA,IAAI;gBACF,MAAMoE,0BAA0BtG,QAAQmG,eAAe,CAACC,MAAM,GAAGG,GAAG,CAACjC,KAAKK,qBAAqB6B,eAAe;gBAC9G,MAAMF,uBAAuB,CAAC3B,qBAAqBd,aAAa,CAAC,CAAC;oBAChE,CAACa,8BAA8B,EAAE;wBAC/B+B,MAAM;4BACJC,OAAOR,OAAOhE,EAAE;wBAClB;wBACAyE,QAAQT,OAAOS,MAAM;wBACrBvE;wBACAR;wBACA,GAAIiD,uBAAuB;4BAAExC;wBAAM,IAAIoB,SAAS;oBAClD;oBACAnB;gBACF;YACF,EAAE,OAAOC,OAAO;gBACd,mEAAmE;gBACnEvC,QAAQwC,MAAM,CAACoE,IAAI,CAAC;oBAAE9D,aAAa;oBAAMP;oBAAOkE,MAAMP;gBAAO,GAAG;YAClE;QACF;IACF,OAAO;QACL,MAAM,IAAInG,wBAAwB;IACpC;AACF;;AAOA,MAAM8G,kBAAkB,CAACC;IACvB,MAAMC,WAAWD,UAAUE,UAAU,CAAC,KAAK;IAC3C,OAAO,CAAC,kBAAkB,EAAED,UAAU;AACxC;AAEA;;;;CAIC,GACD,OAAO,eAAeE,oBAAoB1F,MAAyB;IACjE,IAAI,CAACA,QAAQW,IAAI;QACflC,QAAQwC,MAAM,CAACoE,IAAI,CAAC,CAAC,uDAAuD,CAAC;QAC7E;IACF;IAEA,MAAMpF,UAAU7B;IAChB,MAAMuH,aAAa,MAAM,AAAC1F,QAAQ2F,WAAW,CAAyB3D,OAAO,CAAC4D,SAAS,CAAC7F,OAAOI,MAAM;IACrG,IAAI,CAACuF,YAAY;QACflH,QAAQwC,MAAM,CAACD,KAAK,CAAC,CAAC,iDAAiD,EAAEhB,OAAOI,MAAM,EAAE;QACxF;IACF;IACA,MAAM0F,gBAAgB,AACpB,CAAA,MAAMH,WAAWI,OAAO,CACtB,CAAC;kBACW,EAAEC,6BAA6BhG,OAAOW,EAAE,EAAE;;;;;;;;;;;;;;;OAerD,CAAC,EACF,CAAC,EACH,EACAsF,IAAI;IACN,kEAAkE;IAClE,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAExE,IAAI,EAAE,GAAGmE;IACpCM,OAAOC,MAAM,CAACrG,QAAQ;QACpB,GAAG8F,aAAa;QAChBI,QAAQA,QAAQI;QAChBH,WAAWA,WAAWG;QACtB3E,MAAMA,MAAM2E;QACZ3F,IAAIX,OAAOW,EAAE;IACf;AACF;AAEA,MAAM8B,iBAAyB6C,gBAAgB;AAC/C,MAAMzC,qBAA6ByC,gBAAgB;AAEnD,MAAMU,+BAA+B,CAACrF,KAAe,CAAC,4BAA4B,EAAEA,IAAI"}